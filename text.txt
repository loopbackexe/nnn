1)
 Greeting.jsx
 import React from 'react';
 const Greeting = () => {
  const userName = "John";
  const today = new Date();
  const formattedDate = today.toLocaleDateString("en-US", {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  return (
    <div>
      <h2>Hello, {userName}!</h2>
      <p>Welcome to our website. Today is {formattedDate}.</p>
    </div>
  );
 };
 export default Greeting;
 App.jsx
 import React from 'react';
 import Greeting from './components/Greeting';
 const App = () => {
  return (
    <div>
      <Greeting />
    </div>
  );
 };
 export default App;
 2)
 src/components/Counter.jsx
 import React, { useState } from 'react';
 const Counter = () => {
  const [count, setCount] = useState(0);
  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
 };
 export default Counter;
 App.js
 import React from 'react';
 import Counter from './components/Counter';
const App = () => (
  <div className="App">
    <Counter />
  </div>
 );
 export default App;
 5)
 src/components/CustomCard.jsx
 import React from 'react';
 import { Card, CardActions, CardContent, CardMedia, Button, Typography } from 
'@mui/material';
 import treeImage from '../assets/images/tree.jpg'; // adjust this path if 
necessary
 const CustomCard = () => {
  return (
    <Card sx={{ maxWidth: 345 }}>
      <CardMedia
        component="img"
        height="140"
        image={treeImage}
        alt="Tree"
      />
      <CardContent>
        <Typography gutterBottom variant="h5" component="div">
          Nature
        </Typography>
        <Typography variant="body2" color="text.secondary">
          In the embrace of nature, the symphony of chirping birds and the 
gentle caress of a breeze paint a serene canvas of tranquility.
        </Typography>
      </CardContent>
      <CardActions>
        <Button size="small">Share</Button>
        <Button size="small">Learn More</Button>
      </CardActions>
    </Card>
  );
 };
 export default CustomCard;
 src/App.jsx
 import React from 'react';
 import CustomCard from './components/CustomCard';
 const App = () => {
  return (
    <div style={{ display: 'flex', justifyContent: 'center', padding: '20px' }}>
      <CustomCard />
    </div>
  );
 };
 export default App;
 7)
 src/components/Form.jsx:
 import React, { useRef } from 'react';
const LoginForm = () => {
  const emailInputRef = useRef();
  const passwordInputRef = useRef();
  const handleSubmit = (event) => {
    event.preventDefault();
    const formData = {
      email: emailInputRef.current.value,
      password: passwordInputRef.current.value
    };
    console.log(formData);
    // Clear input fields
    emailInputRef.current.value = '';
    passwordInputRef.current.value = '';
    // Set focus back to email input
    emailInputRef.current.focus();
  };
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="email">Email:</label>
        <input type="email" id="email" ref={emailInputRef} required />
      </div>
      <div>
        <label htmlFor="password">Password:</label>
        <input type="password" id="password" ref={passwordInputRef} required />
      </div>
      <button type="submit">Login</button>
    </form>
  );
 };
 export default LoginForm;
 src/App.jsx:
 import React from 'react';
 import LoginForm from './components/Form';
 const App = () => {
  return (
    <div style={{ display: 'flex', justifyContent: 'center', padding: '20px' }}>
      <LoginForm />
    </div>
  );
 };
 export default App;
 3)
 src/components/DisplayData.jsx
 import React from 'react';
 import PropTypes from 'prop-types';
 const DisplayData = ({ staticData, dynamicData }) => {
 return (
 <div>
 <h2>Static Data:</h2>
 <p>{staticData}</p>
 <h2>Dynamic Data:</h2>
 <p>{dynamicData}</p>
 </div>
);
 };
 DisplayData.propTypes = {
 staticData: PropTypes.string.isRequired,
 dynamicData: PropTypes.node.isRequired
 };
 export default DisplayData;
 src/App.js
 import React from 'react';
 import DisplayData from './components/DisplayData';
 const App = () => {
 const staticData = "Hello, I am static data!";
 const dynamicData = new Date().toString(); // Dynamic data example: current date
 return (
 <div>
 <h1>Props Demo</h1>
 <DisplayData staticData={staticData} dynamicData={dynamicData} />
 </div>
 );
 };
 export default App;
 src/index.js
 import React from 'react';
 import ReactDOM from 'react-dom';
 import App from './App';
 ReactDOM.render(
 <React.StrictMode>
 <App />
 </React.StrictMode>,
 document.getElementById('root')
 );
 6)
 src/components/ErrorBoundary.js
 import React, { Component } from 'react';
 import PropTypes from 'prop-types';
 class ErrorBoundary extends Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }
    static getDerivedStateFromError(error) {
        return { hasError: true };
    }
    componentDidCatch(error, info) {
        // You can log the error to an error reporting service
        console.error("ErrorBoundary caught an error", error, info);
    }
    render() {
        if (this.state.hasError) {
            return <h1>Something went wrong.</h1>;
        }
        return this.props.children;
    }
 }
 ErrorBoundary.propTypes = {
    children: PropTypes.node.isRequired
 };
 export default ErrorBoundary;
src/component/Hero.jsx
 import React from 'react';
 import PropTypes from 'prop-types';
 const Hero = ({ heroName }) => {
    if (heroName === 'Joker') {
        throw new Error('Not a hero!');
    }
    return <div>{heroName}</div>;
 };
 Hero.propTypes = {
    heroName: PropTypes.string.isRequired
 };
 export default Hero;
 src/App.js
 import React from 'react';
 import ErrorBoundary from './components/ErrorBoundary';
 import Hero from './components/Hero';
 const App = () => {
    return (
        <div className="App">
            <h1>Props Demo</h1>
            <ErrorBoundary>
                <Hero heroName="Batman" />
            </ErrorBoundary>
            <ErrorBoundary>
                <Hero heroName="Joker" />
            </ErrorBoundary>
        </div>
    );
 };
 export default App;
 src/index.js
 import React from 'react';
 import ReactDOM from 'react-dom';
 import App from './App';
 ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
 );
 8)
 src/component/WithLoading.jsx
 import React, { Component } from 'react';
 const WithLoading = (WrappedComponent) => {
    return class extends Component {
        constructor(props) {
            super(props);
            this.state = {
                isLoading: true
            };
        }
        componentDidMount() {
            setTimeout(() => {
                this.setState({ isLoading: false });
            }, 3000); // Simulate a loading delay of 3 seconds
        }
        render() {
            const { isLoading } = this.state;
            if (isLoading) {
                return <p>Loading...</p>;
            }
            return <WrappedComponent {...this.props} />;
        }
    };
 };
 export default WithLoading;
 src/App.js
 import React from 'react';
 import WithLoading from './components/WithLoading';
 import MyComponent from './components/MyComponent';
 const WrappedComponentWithLoading = WithLoading(MyComponent);
 const App = () => {
    return (
        <div className="App">
            <WrappedComponentWithLoading />
        </div>
    );
 };
 export default App;
 src/components/MyComponent.jsx
 import React from 'react';
 const MyComponent = () => {
    return <h1>Hello, I'm the wrapped component!</h1>;
 };
 export default MyComponent;
 src/index.js
 import React from 'react';
 import ReactDOM from 'react-dom';
 import App from './App';
 ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
 );
 4) TodoList.jsx
 CREATE EMPTY TodoItem.jsx
 // TodoList.js
 import React, { useState } from 'react';
 import TodoItem from './TodoItem';
 const TodoList = () => {
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');
  const addTodo = () => {
    if (newTodo.trim()) {
      setTodos([...todos, newTodo]);
      setNewTodo('');
    }
  };
  const deleteTodo = (index) => {
    setTodos(todos.filter((_, i) => i !== index));
  };
  return (
    <div>
      <h1>Todo List</h1>
      <input
        type="text"
        placeholder="Add a new todo"
        value={newTodo}
        onChange={(e) => setNewTodo(e.target.value)}
      />
      <button onClick={addTodo}>Add</button>
      <div>
        {todos.map((todo, index) => (
          <TodoItem
            key={index}
            text={todo}
            onDelete={() => deleteTodo(index)}
          />
        ))}
      </div>
    </div>
  );
 };
 export default TodoList;
 //App.js
 import React from 'react';
 import TodoList from './components/TodoList';
 function App() {
  return (
    <div className="App">
      <TodoList/>
    </div>
  );
 }
 export default App;
 9. User List Component With Material-UI Integration and API Fetching
 //axios.js
 const myModule = {
    get: jest.fn(() => 
        Promise.resolve({
            data: [
                {
                },
                {
                },
                {
                },
                {
                    id: 1,
                    name: "John Doe",
                    email: "john@gmail.com"
                    id: 2,
                    name: "Michael",
                    email: "michael@gmail.com"
                    id: 3,
                    name: "Daemon",
                    email: "daemon@gmail.com"
                    id: 4,
                    name: "Klaus",
                    email: "klaus@gmail.com"
                },
                {
                    id: 5,
                    name: "Mikey",
                    email: "mikey@gmail.com"
                }
            ]
        })
    )
 };
 export default myModule;
 //App.js
 import React from 'react';
 import UserList from './components/UserList';
 const App = () => {
  return (
    <div>
      <h1>User Management</h1>
      <UserList />
    </div>
  );
 };
 export default App;
 //UserList.jsx
 import React, { useEffect, useState } from 'react';
 import { Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography } from 
'@mui/material';
 import { getAllUsers } from '../services/UserApi';
 const UserList = () => {
  const [userList, setUserList] = useState([]);
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getAllUsers();
        setUserList(response.data);
      } catch (error) {
        console.error('Error fetching user data', error);
      }
    };
    fetchData();
  }, []);
  return (
    <div>
      <Typography variant="h5" gutterBottom>
        User List
      </Typography>
      <List>
        {userList.length === 0 ? (
          <Typography>No users found</Typography>
        ) : (
          userList.map(user => (
            <ListItem key={user.id}>
              <ListItemAvatar>
                <Avatar>{user.name[0]}</Avatar>
              </ListItemAvatar>
              <ListItemText primary={user.name} secondary={user.email} />
        )}
            </ListItem>
          ))
      </List>
    </div>
  );
 };
 export default UserList;
 //UserApi.js
 import axios from 'axios';
 export const getAllUsers = async () => {
  const response = await axios.get('http://localhost:3005/users');
  return response;
 };
 TERMINAL COMMANDS
 In one terminal
 cd reactapp
 npm install
 npm install json-server@0.16.3
 npm install canvas
 Another server for db.json
 cd reactapp
 npx json-server --watch db.json -p 3005
 10.Counter using Redux
 //App.js
 import React from 'react';
 import { Provider } from 'react-redux';
 import { Store } from './redux/Store';
 import Counter from './components/Counter';
 const App = () => (
    <Provider store={Store}>
        <Counter />
    </Provider>
 );
 export default App;
 //components/Counter.jsx
 import React from 'react';
 import { useDispatch, useSelector } from 'react-redux';
 import { increment, decrement } from '../redux/CounterAction';
 const Counter = () => {
    const count = useSelector((state) => state.count);
    const dispatch = useDispatch();
    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => dispatch(increment())}>Increment</button>
            <button onClick={() => dispatch(decrement())}>Decrement</button>
        </div>
    );
 };
export default Counter;
 //redux/Store.js
 import { createStore } from 'redux';
 import counterReducer from './CounterReducer';
 export const Store = createStore(counterReducer);
 //reduxCounterReducer.js
 const initialState = { count: 0 };
 const counterReducer = (state = initialState, action) => {
    switch (action.type) {
        case 'INCREMENT':
            return { count: state.count + 1 };
        case 'DECREMENT':
            return { count: state.count - 1 };
        default:
            return state;
    }
 };
 export default counterReducer;
 //redux/CounterAction.js
 export const increment = () => ({ type: 'INCREMENT' });
 export const decrement = () => ({ type: 'DECREMENT' });
 11.Theme App using Redux
 // App.js
 import React from 'react';
 import { Provider } from 'react-redux';
 import Theme from './components/Theme';
 import { Store } from './redux/Store';
 const App = () => {
  return (
    <Provider store={Store}>
      <Theme />
    </Provider>
  );
 };
 export default App;
 // Store.js
 import { configureStore } from '@reduxjs/toolkit';
 import themeReducer from './themeSlice';
 export const Store = configureStore({
  reducer: {
    theme: themeReducer,
  },
 });
 // themeSlice.js
 import { createSlice } from '@reduxjs/toolkit';
 const themeSlice = createSlice({
  name: 'theme',
  initialState: { isDark: true },
  reducers: {
    toggleTheme: (state) => {
      state.isDark = !state.isDark;
    },
  },
 });
 export const { toggleTheme } = themeSlice.actions;
 export default themeSlice.reducer;
 // Theme.js
 import React from 'react';
 import { useDispatch, useSelector } from 'react-redux';
 import { toggleTheme } from '../redux/themeSlice';
 const Theme = () => {
  const dispatch = useDispatch();
  const isDark = useSelector((state) => state.theme.isDark);
  return (
    <div
      data-testid="theme-container"
      style={{ backgroundColor: isDark ? 'black' : 'white', color: isDark ? 
'white' : 'black' }}
    >
      <button onClick={() => dispatch(toggleTheme())}>Theme</button>
    </div>
  );
 };
 export default Theme;